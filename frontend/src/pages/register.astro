---
import Layout from '../layouts/Layout.astro';
---

<Layout title="アカウント作成 - Kasaneha">
  <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <div>
        <div class="mx-auto h-12 w-12 flex items-center justify-center rounded-full bg-green-100">
          <svg class="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
          </svg>
        </div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Kasaneha アカウント作成
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
          AIと一緒に心の軌跡を記録しましょう
        </p>
      </div>

      <div class="card">
        <div class="card-body">
          <form id="register-form" class="space-y-6">
            <div id="error-message" class="hidden p-4 bg-red-50 border border-red-200 rounded-md">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm text-red-800" id="error-text"></p>
                </div>
              </div>
            </div>

            <div>
              <label for="username" class="block text-sm font-medium text-gray-700 mb-1">
                ユーザー名 <span class="text-red-500">*</span>
              </label>
              <input
                id="username"
                name="username"
                type="text"
                required
                class="form-input"
                placeholder="3文字以上で入力してください"
                autocomplete="username"
                minlength="3"
              />
              <p class="mt-1 text-xs text-gray-500">日記で使用する名前です</p>
            </div>

            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
                メールアドレス <span class="text-gray-400">(任意)</span>
              </label>
              <input
                id="email"
                name="email"
                type="email"
                class="form-input"
                placeholder="example@mail.com"
                autocomplete="email"
              />
              <p class="mt-1 text-xs text-gray-500">パスワード忘れの際に使用します</p>
            </div>

            <div>
              <label for="password" class="block text-sm font-medium text-gray-700 mb-1">
                パスワード <span class="text-red-500">*</span>
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                class="form-input"
                placeholder="6文字以上で入力してください"
                autocomplete="new-password"
                minlength="6"
              />
              <p class="mt-1 text-xs text-gray-500">6文字以上で設定してください</p>
            </div>

            <div>
              <label for="confirm-password" class="block text-sm font-medium text-gray-700 mb-1">
                パスワード確認 <span class="text-red-500">*</span>
              </label>
              <input
                id="confirm-password"
                name="confirm-password"
                type="password"
                required
                class="form-input"
                placeholder="同じパスワードを再入力してください"
                autocomplete="new-password"
                minlength="6"
              />
            </div>

            <div class="flex items-start">
              <div class="flex items-center h-5">
                <input
                  id="terms"
                  name="terms"
                  type="checkbox"
                  required
                  class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                />
              </div>
              <div class="ml-3 text-sm">
                <label for="terms" class="text-gray-600">
                  <a href="/terms" class="text-blue-600 hover:text-blue-500 underline" target="_blank">利用規約</a>
                  と
                  <a href="/privacy" class="text-blue-600 hover:text-blue-500 underline" target="_blank">プライバシーポリシー</a>
                  に同意します <span class="text-red-500">*</span>
                </label>
              </div>
            </div>

            <div>
              <button
                type="submit"
                id="register-button"
                class="w-full btn btn-primary py-3 text-lg"
              >
                <span id="button-text">アカウントを作成</span>
                <svg id="button-spinner" class="hidden animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </button>
            </div>

            <div class="text-center">
              <p class="text-sm text-gray-600">
                既にアカウントをお持ちの方は
                <a href="/login" class="font-medium text-blue-600 hover:text-blue-500">
                  こちらからログイン
                </a>
              </p>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { authActions } from '../stores/auth';

  const form = document.getElementById('register-form') as HTMLFormElement;
  const errorMessage = document.getElementById('error-message') as HTMLElement;
  const errorText = document.getElementById('error-text') as HTMLElement;
  const registerButton = document.getElementById('register-button') as HTMLButtonElement;
  const buttonText = document.getElementById('button-text') as HTMLElement;
  const buttonSpinner = document.getElementById('button-spinner') as HTMLElement;

  function showError(message: string) {
    errorText.textContent = message;
    errorMessage.classList.remove('hidden');
  }

  function hideError() {
    errorMessage.classList.add('hidden');
  }

  function setLoading(loading: boolean) {
    registerButton.disabled = loading;
    if (loading) {
      buttonText.textContent = 'アカウント作成中...';
      buttonSpinner.classList.remove('hidden');
    } else {
      buttonText.textContent = 'アカウントを作成';
      buttonSpinner.classList.add('hidden');
    }
  }

  // Password confirmation validation
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const confirmPasswordInput = document.getElementById('confirm-password') as HTMLInputElement;

  function validatePasswordMatch() {
    if (confirmPasswordInput.value && passwordInput.value !== confirmPasswordInput.value) {
      confirmPasswordInput.setCustomValidity('パスワードが一致しません');
    } else {
      confirmPasswordInput.setCustomValidity('');
    }
  }

  passwordInput.addEventListener('input', validatePasswordMatch);
  confirmPasswordInput.addEventListener('input', validatePasswordMatch);

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    hideError();

    const formData = new FormData(form);
    const username = formData.get('username') as string;
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;
    const confirmPassword = formData.get('confirm-password') as string;

    // Client-side validation
    if (username.length < 3) {
      showError('ユーザー名は3文字以上で入力してください');
      return;
    }

    if (password.length < 6) {
      showError('パスワードは6文字以上で入力してください');
      return;
    }

    if (password !== confirmPassword) {
      showError('パスワードが一致しません');
      return;
    }

    setLoading(true);

    try {
      await authActions.register(username, password, email || undefined);
      // Redirect to dashboard on success
      window.location.href = '/';
    } catch (error) {
      const message = error instanceof Error ? error.message : 'アカウント作成に失敗しました';
      showError(message);
    } finally {
      setLoading(false);
    }
  });

  // Auto-focus username field
  const usernameInput = document.getElementById('username') as HTMLInputElement;
  usernameInput.focus();
</script> 