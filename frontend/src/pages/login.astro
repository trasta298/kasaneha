---
import Layout from '../layouts/Layout.astro';
---

<Layout title="ログイン - Kasaneha">
  <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <div>
        <div class="mx-auto h-12 w-12 flex items-center justify-center rounded-full bg-blue-100">
          <svg class="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C20.832 18.477 19.246 18 17.5 18c-1.746 0-3.332.477-4.5 1.253" />
          </svg>
        </div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Kasaneha にログイン
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
          AIと対話して感情を分析する日記アプリ
        </p>
      </div>

      <div class="card">
        <div class="card-body">
          <form id="login-form" class="space-y-6">
            <div id="error-message" class="hidden p-4 bg-red-50 border border-red-200 rounded-md">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm text-red-800" id="error-text"></p>
                </div>
              </div>
            </div>

            <div>
              <label for="username" class="sr-only">ユーザー名</label>
              <input
                id="username"
                name="username"
                type="text"
                required
                class="form-input"
                placeholder="ユーザー名"
                autocomplete="username"
              />
            </div>

            <div>
              <label for="password" class="sr-only">パスワード</label>
              <input
                id="password"
                name="password"
                type="password"
                required
                class="form-input"
                placeholder="パスワード"
                autocomplete="current-password"
              />
            </div>

            <div>
              <button
                type="submit"
                id="login-button"
                class="w-full btn btn-primary py-3 text-lg"
              >
                <span id="button-text">ログイン</span>
                <svg id="button-spinner" class="hidden animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </button>
            </div>

            <div class="text-center">
              <p class="text-sm text-gray-600">
                アカウントをお持ちでない方は
                <a href="/register" class="font-medium text-blue-600 hover:text-blue-500">
                  こちらから登録
                </a>
              </p>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { authActions } from '../stores/auth';

  const form = document.getElementById('login-form') as HTMLFormElement;
  const errorMessage = document.getElementById('error-message') as HTMLElement;
  const errorText = document.getElementById('error-text') as HTMLElement;
  const loginButton = document.getElementById('login-button') as HTMLButtonElement;
  const buttonText = document.getElementById('button-text') as HTMLElement;
  const buttonSpinner = document.getElementById('button-spinner') as HTMLElement;

  function showError(message: string) {
    errorText.textContent = message;
    errorMessage.classList.remove('hidden');
  }

  function hideError() {
    errorMessage.classList.add('hidden');
  }

  function setLoading(loading: boolean) {
    loginButton.disabled = loading;
    if (loading) {
      buttonText.textContent = 'ログイン中...';
      buttonSpinner.classList.remove('hidden');
    } else {
      buttonText.textContent = 'ログイン';
      buttonSpinner.classList.add('hidden');
    }
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    hideError();
    setLoading(true);

    const formData = new FormData(form);
    const username = formData.get('username') as string;
    const password = formData.get('password') as string;

    console.log('ログイン試行中...', { username });

    try {
      const response = await authActions.login(username, password);
      console.log('ログイン成功:', response);
      
      // 認証状態の更新を確実に行ってからリダイレクト
      await new Promise(resolve => setTimeout(resolve, 200));
      
      console.log('ホーム画面に遷移中...');
      window.location.href = '/';
    } catch (error) {
      console.error('ログインエラー:', error);
      const message = error instanceof Error ? error.message : 'ログインに失敗しました';
      showError(message);
    } finally {
      setLoading(false);
    }
  });

  // Auto-focus username field
  const usernameInput = document.getElementById('username') as HTMLInputElement;
  usernameInput.focus();
</script> 